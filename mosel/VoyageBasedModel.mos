model VoyageBasedModel
uses  "mmxprs", "mmsheet"; ! Use Xpress-Optimizer and Excel

!optional parameters section
parameters
	 ! Input file is specified here
	 DataFile = 'VoyageBasedModelData.txt';
end-parameters

declarations
	! Sizes of sets which 
	nV: integer; ! No of vessels
	nR: integer; ! No of voyages
	nN: integer; ! No of installations
	minF: integer; ! Minimum number of required visits
	maxF: integer; ! Maximum number of required visits
	nT: integer; ! No of days in planning period
	minL: integer; ! Minimum voyage duration
	maxL: integer; ! Maximum voyage duration
	
	
end-declarations

initializations from DataFile
	nV;
	nR;
	nN;
	minF;
	maxF;
	nT;
	minL;
	maxL;
end-initializations

V := 1 .. nV;
N := 1 .. nN;
F := minF .. maxF;
T := 1 .. nT;
L := minL .. maxL;
R := 1 .. nR;

declarations
	! Sets
	Rv: array(V) of set of integer; ! Voyages a vessel can sail
	Rvi: array(V, N) of set of integer; ! Voyages a vessel can sail that visit installation i
	Rvl: array(V, N) of set of integer;
	Nf: array(F) of set of integer; ! Sets of installations requiring 2,3,4,5 visits, respectively
	
	! Parameters
	TimeCharterCost: array(V) of real; ! C^(TC)
	VoyageCost: array(R) of real; ! C^S, includes sailing and service costs
	RequiredVisits: array(N) of integer; ! S_i
	NumberOfDaysAvailable: array(V) of integer; ! F_v, number of days vessel v may be used during the planning period
 	DepotCapacity: array(T) of integer; ! B_t, max number of vessels that can be serviced at depot each day
			
	hf: array(1..7) of integer;
	Pf_min: array(1..7) of integer;
	Pf_max: array(1..7) of integer;
	
	! Variables
	delta: dynamic array(V) of mpvar; ! 1 if vessel v is chartered, 0 otherwise
	x: dynamic array(V, R, T) of mpvar; ! 1 if vessel v sails route r starting on day t
end-declarations

! Parameters used for spreading departures
hf ::	[6, 2, 2, 3, 1, 0, 0] ! Horizon in which we need to constrain number of departures, given f required visits
Pf_min :: [0, 0, 1, 2, 1, 0, 0] ! Minimum no of departures to an installation in the horizon hf
Pf_max :: [1, 1, 3, 4, 2, 1, 1] ! Maximum no of departures to an installation in the horizon hf

initializations from DataFile
	! Sets
	Rv;
	Rvi;
	Rvl;
	nN;
	minF;
	maxF;
	Nf;
	nT;
	minL;
	maxL;
	
	!Parameters
	TimeCharterCost;
	VoyageCost;
	RequiredVisits;
	NumberOfDaysAvailable;
 	DepotCapacity;
end-initializations

!Creating variables
forall(vv in V) do
	create(delta(vv));
	delta(vv) is_binary;
	
	forall(rv in Rv(vv), tt in T) do
		create(x(vv,rv,tt));
		x(vv,rv,tt) is_binary;
	end-do
	
end-do

! Declaring constraints and objective function
declarations
	TotalCost:linctr ! (4.1)
	VisitsCon: dynamic array(N) of linctr; ! (4.2) All installations must be visited the required times
	AvailableDaysCon: dynamic array(V) of linctr; ! (4.3) Each vessel does not sail more days than allowed
	DepotCapacityCon: dynamic array(T) of linctr; ! (4.4)
	ReturnBeforeNewVoyageCon: dynamic array(V, T, L) of linctr; ! (4.5) Vessel does not begin a new voyage before it has returned from its last voyage
	SpreadDeparturesMinCon: dynamic array(N, F, T) of linctr; ! (4.6) - Lower bound
	SpreadDeparturesMaxCon: dynamic array(N, F, T) of linctr; ! (4.6) - Upper bound
end-declarations

! (4.1)
TotalCost := sum(vv in V)TimeCharterCost(vv) * delta(vv) + sum(vv in V, rr in Rv(vv), tt in T) VoyageCost(rr) * x(vv, rr, tt);

! (4.2)
forall(ii in N) do
	VisitsCon(ii) := sum(vv in V, rr in Rvi(vv,ii), tt in T) x(vv,rr,tt) >= RequiredVisits(ii);
end-do

! (4.3)
forall(vv in V) do
	AvailableDaysCon(vv) := sum(ll in L, rr in Rv(vv), tt in T) (x(vv,rr,tt)) * ll - NumberOfDaysAvailable(vv) * delta(vv) <= 0;
end-do

! (4.4)
forall(tt in T) do
	DepotCapacityCon(tt) := sum(vv in V, rr in Rv(vv)) x(vv,rr,tt) <= DepotCapacity(tt);
end-do

! (4.5)
forall(vv in V, tt in T, ll in L) do
	ReturnBeforeNewVoyageCon(vv, tt, ll) := sum(rr in Rvl(vv,ll)) x(vv,rr,tt) + sum(rr in Rv(vv), ti in 1..(ll-1)) x(vv, rr, (tt+ti)mod nT)	<= delta(vv);
end-do

! (4.6)
forall(ff in F, ii in Nf(ff), tt in T) do
	SpreadDeparturesMinCon(ii, ff, tt) := Pf_min(ff) <= sum(vv in V, rr in Rvi(vv,ii), hh in 0..hf(ff)) x(vv, rr, (tt+hh)mod nT );
	SpreadDeparturesMaxCon(ii, ff, tt) := Pf_max(ff) >= sum(vv in V, rr in Rvi(vv,ii), hh in 0..hf(ff)) x(vv, rr, (tt+hh)mod nT );
end-do
	
	
minimize(TotalCost);

writeln("Begin running model")
writeln("End running model")

end-model
