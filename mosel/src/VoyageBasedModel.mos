model VoyageBasedModel
uses  "mmxprs", "mmsystem"; ! Use Xpress-Optimizer

parameters
	 ! Input file is specified here
	 DataFilePath = '..\data\input\';
	 InputDate = '2015-11-08 ';
	 ProblemInstance = '14-0';
	 DataFile = DataFilePath + InputDate +  ProblemInstance + '.txt';
end-parameters

declarations
	! Sizes/bounds of sets
	nV: integer; ! No of vessels
	nR: integer; ! No of voyages
	nN: integer; ! No of installations
	minF: integer; ! Minimum number of required visits
	maxF: integer; ! Maximum number of required visits
	nT: integer; ! No of days in planning period
	minL: integer; ! Minimum voyage duration
	maxL: integer; ! Maximum voyage duration
end-declarations

initializations from DataFile
	nV;
	nR;
	nN;
	minF;
	maxF;
	nT;
	minL;
	maxL;
end-initializations

V := 1 .. nV;
N := 1 .. nN;
Frequency := minF .. maxF;
T := 0 .. nT-1; ! Zero-indexed due to use of modulus operator in spread of departures constraints
L := minL .. maxL;
R := 1 .. nR;

declarations
	! Sets
	Rv: array(V) of set of integer; ! Voyages a vessel can sail
	Rvi: array(V, N) of set of integer; ! Voyages a vessel can sail that visit installation i
	Rvl: array(V, L) of set of integer; ! Voyages a vessel can sail that has duration l
	Nf: array(Frequency) of set of integer; ! Sets of installations requiring f visits
	
	! Parameters
	TimeCharterCost: array(V) of real; ! C^(TC)
	VoyageCost: array(R) of real; ! C^S, includes sailing and service costs
	VoyageDuration: array(R) of integer; ! D_v, duration of voyage
	RequiredVisits: array(N) of integer; ! S_i
	NumberOfDaysAvailable: array(V) of integer; ! F_v, number of days vessel v may be used during the planning period
 	DepotCapacity: array(T) of integer; ! B_t, max number of vessels that can be serviced at depot each day
			
	hf: array(1..7) of integer;
	Pf_min: array(1..7) of integer;
	Pf_max: array(1..7) of integer;
	
	! Variables
	delta: dynamic array(V) of mpvar; ! 1 if vessel v is chartered, 0 otherwise
	x: dynamic array(V, R, T) of mpvar; ! 1 if vessel v sails route r starting on day t
	
	! Output helpers
	DayNames: array(T) of string;
end-declarations

! Parameters used for spreading departures
hf ::	[6, 2, 2, 3, 1, 0, 0] ! Horizon in which we need to constrain number of departures, given f required visits
Pf_min :: [0, 0, 1, 2, 1, 0, 0] ! Minimum no of departures to an installation in the horizon hf
Pf_max :: [1, 1, 3, 4, 2, 1, 1] ! Maximum no of departures to an installation in the horizon hf

! DayNames is used to make output more readable
DayNames :: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']

initializations from DataFile
	! Sets
	Rv;
	Rvi;
	Rvl;
	nN;
	minF;
	maxF;
	Nf;
	nT;
	minL;
	maxL;
	
	!Parameters
	TimeCharterCost;
	VoyageCost;
	VoyageDuration;
	RequiredVisits;
	NumberOfDaysAvailable;
 	DepotCapacity;
end-initializations


!Creating variables
forall(vv in V) do
	create(delta(vv));
	delta(vv) is_binary;
	
	forall(rv in Rv(vv), tt in T) do
		create(x(vv,rv,tt));
		x(vv,rv,tt) is_binary;
	end-do
	
end-do

! Declaring constraints and objective function
declarations
	TotalCost:linctr ! (4.1)
	VisitsCon: dynamic array(N) of linctr; ! (4.2) All installations must be visited the required times
	AvailableDaysCon: dynamic array(V) of linctr; ! (4.3) Each vessel does not sail more days than allowed
	DepotCapacityCon: dynamic array(T) of linctr; ! (4.4)
	ReturnBeforeNewVoyageCon: dynamic array(V, T, L) of linctr; ! (4.5) Vessel does not begin a new voyage before it has returned from its last voyage
	SpreadDeparturesMinCon: dynamic array(N, Frequency, T) of linctr; ! (4.6) - Lower bound
	SpreadDeparturesMaxCon: dynamic array(N, Frequency, T) of linctr; ! (4.6) - Upper bound
end-declarations

! (4.1)
TotalCost := sum(vv in V)TimeCharterCost(vv) * delta(vv) + sum(vv in V, rr in Rv(vv), tt in T) VoyageCost(rr) * x(vv, rr, tt);

! (4.2)
forall(ii in N) do
	VisitsCon(ii) := sum(vv in V, rr in Rvi(vv,ii), tt in T) x(vv,rr,tt) >= RequiredVisits(ii);
end-do

! (4.3)
forall(vv in V) do
	AvailableDaysCon(vv) := sum(ll in L, rr in Rvl(vv, ll), tt in T) (x(vv,rr,tt) * ll) <= NumberOfDaysAvailable(vv) * delta(vv);
end-do

! (4.4)
forall(tt in T) do
	DepotCapacityCon(tt) := sum(vv in V, rr in Rv(vv)) x(vv,rr,tt) <= DepotCapacity(tt);
end-do

! (4.5)
forall(vv in V, tt in T, ll in L) do
	ReturnBeforeNewVoyageCon(vv, tt, ll) := sum(rr in Rvl(vv,ll)) (x(vv,rr,tt)) + sum(rr in Rv(vv), ti in 1..(ll-1)) x(vv, rr, (tt+ti)mod nT)<= delta(vv);
end-do

! (4.6)
forall(ff in Frequency, ii in Nf(ff), tt in T) do
	SpreadDeparturesMinCon(ii, ff, tt) := Pf_min(ff) <= sum(vv in V, rr in Rvi(vv,ii), hh in 0..hf(ff)) x(vv, rr, ((tt+hh)mod nT));
	SpreadDeparturesMaxCon(ii, ff, tt) := Pf_max(ff) >= sum(vv in V, rr in Rvi(vv,ii), hh in 0..hf(ff)) x(vv, rr, ((tt+hh)mod nT));

	(!
	forall(hh in 0..hf(ff)) do
		writeln("Day " + (tt+hh) + " becomes day " + (tt+hh)mod nT + ", " + Days((tt+hh)mod nT));
	end-do
	!)
end-do

writeln("Begin running model...")

minimize(TotalCost);

writeln("Model finished running");

setparam("datetimefmt", "%.y-%0m-%0d %0H.%0M");
DateTime := datetime(SYS_NOW);

OutputFile := string(DateTime) + ' ' + ProblemInstance + '.txt';
writeln("Writing output to " + OutputFile);

fopen('..\data\output\' + OutputFile, F_OUTPUT);
	
	(!TODO:
	
	Vessels used
	Voyages used
	CPU voymodel(i.e. runtime)
	Opt gap
	!)
	
	
	writeln("Problem instance: " + ProblemInstance);
	writeln("Solved on: " + DateTime);
	writeln("CPU time: ");
	writeln("Optimality gap:");
	
	writeln("------------------------------------------------------------");	
	writeln("Vessels used: \n");
	nVesselsUsed := 0;
	
	forall(vv in V) do
		writeln("Vessel " + vv + ": " + getsol(delta(vv)) + ". Cost: " + TimeCharterCost(vv));
		if (getsol(delta(vv)) > 0.5) then
			nVesselsUsed := nVesselsUsed + 1;
		end-if	
	end-do	
	
	writeln("------------------------------------------------------------");	
	writeln("Voyages sailed: \n");
	
	nVoyagesUsed := 0;
	forall(vv in V, rr in Rv(vv), tt in T) do
		if (getsol(x(vv,rr,tt)) > 0.5) then
			writeln("Vessel " + vv + ", Voyage " + rr + ", " + DayNames(tt) + ". Cost: " + VoyageCost(rr) + ". Duration: " + VoyageDuration(rr));
			nVoyagesUsed := nVoyagesUsed + 1;
		end-if	
	end-do
	
	writeln("------------------------------------------------------------");
	writeln("Objective value: " + getobjval);
	writeln("Charter cost:\t " + sum(vv in V) TimeCharterCost(vv)*getsol(delta(vv)));
	writeln("Sailing cost:\t " + sum(vv in V, rr in Rv(vv), tt in T) VoyageCost(rr) * getsol(x(vv,rr,tt))); 
	writeln("Number of vessels used:\t" + nVesselsUsed);
	writeln("Number of voyages sailed: " + nVoyagesUsed);
	
	writeln("------------------------------------------------------------");
	forall(ii in N) do
		visits := sum(vv in V, rr in Rvi(vv,ii), tt in T) getsol(x(vv,rr,tt));
		writeln("Installation " + ii + ": " + visits + " out of " + RequiredVisits(ii) + " required visits");
	end-do
	
	writeln("------------------------------------------------------------");
	writeln("Departures to each installation:");
	
	write("\n\t\t");
	forall(tt in T) do
		write(DayNames(tt) + "\t");
	end-do
	
	forall(ii in N) do
		write("\nInstallation " + ii + ":");
		
		forall(tt in T) do
			nDepartures := 0;
			
			forall(vv in V, rr in Rvi(vv, ii)| getsol(x(vv, rr,tt)) > 0.5) do
				nDepartures := nDepartures + 1;
			end-do
			write("\t  " + string(nDepartures));
			
		end-do
	end-do	
	
fclose(F_OUTPUT);

end-model
