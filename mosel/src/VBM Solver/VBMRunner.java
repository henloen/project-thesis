//Java code generated by the Xpress-IVE deployment wizard

import java.io.*;
import com.dashoptimization.*;

import java.io.File;
import jxl.Sheet;
import jxl.Workbook;

public class VBMRunner
{
	static String inputFileName = "VBM Solver Suite.xls";
	static int numberOfProblems;
	// Change parameters as needed here
	static String dataFilePath = "\\\\file.stud.iot.ntnu.no\\Home\\thombor\\Desktop\\GitHub\\project-thesis\\mosel\\data\\input\\";
	static String baselineFilePath = "\\\\file.stud.iot.ntnu.no\\Home\\thombor\\Desktop\\GitHub\\project-thesis\\mosel\\data\\input\\baseline\\";
	static String outputFilePath = "\\\\file.stud.iot.ntnu.no\\Home\\thombor\\Desktop\\GitHub\\project-thesis\\mosel\\data\\output\\";
	
	
	static String[] inputDate;
	static String[] problemInstance;
	static String[] testCase;
	static String[] baselineFile;
	static int[] nNBaseline;
	static int[] instancesToSolve;
	static boolean[] useEpsilonConstraintMethod;
	static boolean[] validInequalities;
	static boolean[] symmetryBreaking;
	static boolean[] vesselDom;
	static double[] optimalityGapLimit;
	
 public static void main(String[] args)
 {
  int result;

  getParametersFromExcel();
  
  try {
   result=runMoselModel();
   System.out.println("Model execution returned: "+result);
  }
  catch(java.lang.Exception e)
  {
   System.out.println("Model loading or execution error : " + e.getMessage());
  }
 }

 static int runMoselModel() throws IOException
 {
  XPRMModel model;
  XPRM xprm;
  int result;

  // Initialize Mosel
  xprm = new XPRM();

  
  try {
  System.out.println("Compiling mosel file");
  xprm.compile("\\\\file.stud.iot.ntnu.no\\home\\thombor\\desktop\\github\\project-thesis\\mosel\\src\\voyagebasedmodel.mos");
  } catch (XPRMCompileException e) {
	  System.out.println("Failed to compile mosel file: " + e.getMessage());
  }
  
  // Load compiled model (.BIM file)
  System.out.println("Loading compiled mosel file");
  model=xprm.loadModel("\\\\file.stud.iot.ntnu.no\\home\\thombor\\desktop\\github\\project-thesis\\mosel\\src\\voyagebasedmodel.bim");
  
  String constantParameters;
  constantParameters = "DataFilePath = '" + dataFilePath + "', ";
  constantParameters += "OutputFilePath = '" + outputFilePath + "', ";
  constantParameters += "BaselineFilePath = '" + baselineFilePath + "', ";
  
  for (int i = 0; i < numberOfProblems; i++){
	String parameters = constantParameters;
	
	parameters += "InputDate = '" + inputDate[i] + "', ";
	parameters += "ProblemInstance = '" + problemInstance[i] + "', ";
	parameters += "DataFile = '" + dataFilePath + inputDate[i] + " " + problemInstance[i] + ".txt', ";
	parameters += "TestCase = '" + testCase[i] + "'";
	parameters += "OptimalityGapLimit = " + optimalityGapLimit[i];
	parameters += "UseEpsilonConstraintMethod = " + useEpsilonConstraintMethod[i] + ", ";
	parameters += "BaselineFile = '" + baselineFilePath + baselineFile[i] + "', ";
	parameters += "nNBaseline = " + nNBaseline[i];
	parameters += "ValidInequalities = " + validInequalities[i] + ", ";
	parameters += "SymmetryBreaking = " + symmetryBreaking[i] + ", ";
	parameters += "VesselDom = " + vesselDom[i] + ", ";
	
	//System.out.println("Parameters: " + parameters);

	model.execParams = parameters; // Sets parameters in Xpress
	
	System.out.println("\n======================================================\nSolving problem " + problemInstance[i]);
	model.run();
	System.out.println("Resetting model");
	model.reset();
  }
  
  System.out.println("\n\nAll problems solved. Have a nice day.");
	  

  if(model.getExecStatus() != XPRMModel.RT_OK)
  {
    throw new java.lang.RuntimeException("Error during execution");
  }
  else
  {
      result=model.getResult();
      return result;
  }

  // Clean up is automatic in Java
 }
 
 public static void getParametersFromExcel(){
	try {
	
	Workbook workbook = Workbook.getWorkbook(new File(inputFileName));
	Sheet sheet = workbook.getSheet(0);
	numberOfProblems = Integer.parseInt(sheet.getCell(0, 3).getContents());
	System.out.println("\nYou got " + numberOfProblems + " problems, but a bitch ain't one!\n");
	
	
	inputDate = new String[numberOfProblems];
	problemInstance = new String[numberOfProblems];
	testCase = new String[numberOfProblems];
	optimalityGapLimit = new double[numberOfProblems];
	useEpsilonConstraintMethod = new boolean[numberOfProblems];
	baselineFile = new String[numberOfProblems];
	nNBaseline = new int[numberOfProblems];
	validInequalities = new boolean[numberOfProblems];
	symmetryBreaking = new boolean[numberOfProblems];
	vesselDom = new boolean[numberOfProblems];
	
	for (int i = 0; i < numberOfProblems; i++){
		inputDate[i] = sheet.getCell(1, 7+i).getContents();
		problemInstance[i] = sheet.getCell(2, 7+i).getContents();
		testCase[i] = sheet.getCell(3, 7+i).getContents();
		optimalityGapLimit[i] = Double.parseDouble(sheet.getCell(4, 7+i).getContents());
		useEpsilonConstraintMethod[i] = Boolean.parseBoolean(sheet.getCell(5, 7+i).getContents());
		baselineFile[i] = sheet.getCell(6, 7+i).getContents() + ".txt";
		nNBaseline[i] = Integer.parseInt(sheet.getCell(7, 7+i).getContents());
		validInequalities[i] = Boolean.parseBoolean(sheet.getCell(8, 7+i).getContents());
		symmetryBreaking[i] = Boolean.parseBoolean(sheet.getCell(9, 7+i).getContents());
		vesselDom[i] = Boolean.parseBoolean(sheet.getCell(10, 7+i).getContents());
		
	}
	} catch (Exception e) {
		e.printStackTrace();
		System.out.println("Something went wrong when loading the parameters from file");
	}
 }
 
}
